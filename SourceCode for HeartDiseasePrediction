import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import rcParams
from matplotlib.cm import rainbow
%matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn import datasets
from sklearn import linear_model
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import mean_squared_error
data= pd.read_csv(r'C:\Users\ASUS\Downloads\archive (2)\heart.csv')
print(data)
data.head()
data.tail()
data.shape
data.info()
data.isnull().sum() #to check for null values
data.describe()
plt.figure(figsize = (10,10))
sns.heatmap(data.corr(),annot = True,cmap='viridis',linewidths=.5)
data.hist()
data['target'].value_counts() #how many ppl have heart disease
rcParams['figure.figsize'] = 8,6
plt.bar(data['target'].unique(),data['target'].value_counts(),color=['red','green'])
plt.xticks([0,1])
plt.xlabel('Target Classes')
plt.ylabel('Count')
plt.title('Count of each Target Class')
x = data.drop(columns = 'target',axis = 1) #dropping row axis = 0
y = data['target']
print(x)
print(y)
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,stratify=y,random_state = 2)
print(x.shape,x_train.shape,x_test.shape)
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_train,y_train)
y_predicted = model.predict(x_test)
print("MSE is:=",mean_squared_error(y_test,y_predicted))
model1 = DecisionTreeClassifier()
model1.fit(x_train,y_train)
prediction = model1.predict(x_test)
import sklearn as sklearn
sklearn.tree.plot_tree(model1,max_depth=None,feature_names = None,class_names=None,label='all',filled=False,impurity=True,node_ids=False,proportion=False,rounded=False,precision=3,ax=None,fontsize=None)
plt.title('Decision tree using Entropy',fontsize=22)
score = accuracy_score(y_test,prediction)
score
model2 = LogisticRegression()
model2.fit(x_train,y_train) #find relationship btw feature and target
#Accuracy on training data
x_train_prediction = model2.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction,y_train)
print('accuracy on training data:',training_data_accuracy)
#Accuracy on testing data
x_test_prediction = model2.predict(x_test)
testing_data_accuracy = accuracy_score(x_test_prediction,y_test)
print('accuracy on training data:',testing_data_accuracy)
#predictive system

input_data = (71,0,0,112,149,0,1,125,0,1.6,1,0,2)
#change the ip data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model2.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==0):
    print("The person does not has heart disease.")
else:
    print("The person has heart disease.")
    
